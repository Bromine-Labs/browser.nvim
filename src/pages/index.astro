---
import Tabs from "../components/Tabs.astro";
import "../styles.css";
---

<html lang="en">
  <head>
    <meta name="description" content="a pretty crappy proxy.">

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Browser.nvim</title>
    <script async is:inline defer>
      document.addEventListener("DOMContentLoaded", () => {
        document.body.dataset.theme = localStorage.getItem("theme");
      });
      window.addEventListener("theme-changed", () => {
        document.body.dataset.theme = localStorage.getItem("theme");
      });
    </script>
    <script async defer is:inline>
let inFrame;

try {
  inFrame = window !== top;
} catch (e) {
  inFrame = true;
}
if (
  !inFrame &&
  !navigator.userAgent.includes("Firefox") &&
  localStorage.getItem("ab") === "true"
) {
  const popup = open("about:blank", "_blank");
    if (!popup || popup.closed) {
      alert(
        "Please allow popups for this site. Doing so will allow us to open the site in a about:blank tab and preventing this site from showing up in your history. You can turn this off in the site settings.",
      );
    } else {
      const doc = popup.document;
      const iframe = doc.createElement("iframe");
      const style = iframe.style;
      const link = doc.createElement("link");

      const name = localStorage.getItem("name") || "My Drive - Google Drive";
      const icon =
        localStorage.getItem("icon") ||
        "https://ssl.gstatic.com/docs/doclist/images/drive_2022q3_32dp.png";

      doc.title = name;
      link.rel = "icon";
      link.href = icon;

      iframe.src = location.href;
      style.position = "fixed";
      style.top = style.bottom = style.left = style.right = 0;
      style.border = style.outline = "none";
      style.width = style.height = "100%";

      doc.head.appendChild(link);
      doc.body.appendChild(iframe);

      const pLink = localStorage.getItem(encodeURI("pLink")) || getRandomUrl();
      location.replace(pLink);

      const script = doc.createElement("script");
      script.textContent = `
      window.onbeforeunload = function (event) {
        const confirmationMessage = 'Leave Site?';
        (event || window.event).returnValue = confirmationMessage;
        return confirmationMessage;
      };
    `;
      doc.head.appendChild(script);
    }
}

    </script>
    <script async defer is:inline type="module">
  // --- LETHAL IMPORTS ---
  import {
    setTransport,
    setWisp,
    setProxy,
    makeURL,
    getProxied,
  } from "./lethal.mjs"




  // --- INIT ---
  const form = document.getElementById("form")
  const input = document.getElementById("address")
  let search =
    localStorage.getItem("search-engine") ||
    "https://search.brave.com/search?q=%s"
  let tabCounter = 1
  let currentTab = 1
  let currentFrame = document.getElementById(`frame-${currentTab}`)

  let backend = localStorage.getItem("proxy-backend") || "scram"
  let wisp = localStorage.getItem("wisp-server") || "wss://anura.pro/"
  let transport = localStorage.getItem("proxy-transport")

  setWisp(wisp)
  setProxy(backend)

  if (transport) setTransport(transport)
  else if (navigator.userAgent.indexOf("Firefox") > 0) setTransport("libcurl")
  else setTransport("epoxy")


  // --- EVENTS ---

form.addEventListener("submit", async (event) => {
  event.preventDefault();

  const address = input.value;
  const searchEngines = {
    ":search brave": "https://search.brave.com/search?q=%s",
    ":search google": "https://www.google.com/search?q=%s",
    ":search ddg": "https://duckduckgo.com/?q=%s",
  };

  const proxies = {
    ":setProxy scram": "scramjet",
    ":setProxy uv": "uv",
  };

  const realthings = ["mocha", "default", "moon", "dawn", "macchiato", "frappe", "latte"]

  if (address.startsWith(":setTheme ")) {
    const theme = address.substring(10);
    if (realthings.includes(theme)) {
      localStorage.setItem("theme", theme);
      document.body.dataset.theme = theme;
      document.dispatchEvent(new CustomEvent("theme-changed"));
      alert(`Theme set to: ${theme}`);
    } else {
      alert(`Invalid theme. Available themes: ${realthings.join(", ")}`);
    }
    return;
  }

  if (address.startsWith(":setWisp ")) {
    wisp = address.substring(9);
    setWisp(address.substring(9));
    localStorage.setItem("wisp-server", address.substring(9));
    alert(`Wisp server set to: ${wisp}`);
    return;
  }

  if (address.startsWith(":setTransport ")) {
    transport = address.substring(14);
    setWisp(address.substring(14));
    localStorage.setItem("proxy-transport", address.substring(14));
    alert(`Transport set to: ${transport}`);
    return;
  }

  if (address.startsWith(":switchTab ")) {
    const tabNumber = address.split(" ")[1];
    if (isNaN(tabNumber) === false) {
      switchTab(tabNumber);
    } else {
      alert("Invalid tab number");
    }
    return;
  }

  if(address.startsWith(":setCustomSearch ")) {
    const customSearch = address.split(" ")[1];
    search = customSearch;
    localStorage.setItem("search-engine", customSearch);
    alert("Custom search engine set to: " + customSearch);
    return;
  }

  if (searchEngines[address]) {
    search = searchEngines[address];
    localStorage.setItem("search-engine", searchEngines[address]);
    alert(`Search engine set to: ${searchEngines[address]}`);
    return;
  }

  if (proxies[address]) {
    setProxy(proxies[address]);
    backend = proxies[address];
    localStorage.setItem("proxy-backend", proxies[address]);
    alert(`Proxy backend set to: ${proxies[address]}`);
    return;
  }

  if (address.startsWith(":setMark ")) {
    const bred = address.split(" ");
    localStorage.setItem(`bookmark-${bred[1]}`, bred[2]);
    alert(`Set mark ${bred[1]} to page ${bred[2]}`)
    return;
  }

  if (address.startsWith(":mark ")) {
    const shit = address.split(" ");
      if (localStorage.getItem("stealth-mode")) {
        currentFrame.contentWindow.location.replace(getProxied(localStorage.getItem(`bookmark-${shit[1]}`)));
      } else {
        currentFrame.src = await getProxied(localStorage.getItem(`bookmark-${shit[1]}`));
      }
    return;
  }

  switch (address) {
    case ":getWisp":
      alert(`Current Wisp server: ${wisp}`);
      break;

    case ":getTheme":
      alert(`Current Theme: ${localStorage.getItem("theme") || "default"}`);
      break;

    case ":getTransport":
      alert(`Current Transport: ${transport}`);
      break;
    
    case ":getSearch":
      alert(`Current search engine: ${search}`);
      break;

    case ":getProxy":
      alert(`Current Proxy Backend: ${backend}`);
      break;

    case ":back":
      currentFrame.contentWindow.history.back();
      break;

    case ":forward":
      currentFrame.contentWindow.history.forward();
      break;

    case ":reload":
      currentFrame.contentWindow.location.reload();
      break;

    case ":newtab":
      newTab();
      break;

    case ":closetab":
      closeTab(currentTab);
      break;

    case ":stealthmode":
      if(localStorage.getItem("stealth-mode") !== "false")
        localStorage.setItem("stealth-mode", "false");
      else if (localStorage.getItem("stealth-mode") === "false")
        localStorage.setItem("stealth-mode", "true");
      alert("You found a secret! Stealth mode toggled!")
      break;

    case ":aboutblank":
      if(localStorage.getItem("ab") !== "false")
        localStorage.setItem("ab", "false");
      else if (localStorage.getItem("ab") === "false")
        localStorage.setItem("ab", "true");
      alert("About Blank toggled!")
      break;

    case ":help":
      if (localStorage.getItem("stealth-mode")) {
        currentFrame.contentWindow.location.replace("/help");
      } else {
        currentFrame.src = "/help";
      }
      break;

    case ":history":
      if (localStorage.getItem("stealth-mode")) {
        currentFrame.contentWindow.location.replace("/history");
      } else {
        currentFrame.src = "/history";
      }
      break;

    case ":q":
      location.replace("https://classroom.google.com/h");
      break;

    default:
      const urlToLoad = makeURL(address, search);
      const proxiedUrl = await getProxied(urlToLoad);
      if (localStorage.getItem("stealth-mode")) {
        currentFrame.contentWindow.location.replace(proxiedUrl);
      } else {
        currentFrame.src = proxiedUrl;
      }
      input.value = urlToLoad;
      break;
  }
});

  // --- UTILITIES ---
  async function newTab() {
    tabCounter++

    let frames = document.querySelectorAll("iframe")
    let framesArr = [...frames]
    framesArr.forEach((frame) => {
      frame.classList.add("hidden")
    })

    let frame = document.createElement("iframe")
    frame.setAttribute("class", "w-full h-full border-0 fixed")
    frame.setAttribute("title", "Proxy Frame")
    frame.setAttribute("src", "/newtab")
    frame.setAttribute("id", `frame-${tabCounter}`)
    document.getElementById("frames").appendChild(frame)

    currentTab = tabCounter
    switchTab(tabCounter)


    frame.addEventListener("load", () => {
      let url = decodeURIComponent(
        currentFrame.contentWindow.location.href.replace(`${location.origin}/${backend}/`, ""),
      )
      let title = currentFrame.contentWindow.document.title

      let history = localStorage.getItem("history")
        ? JSON.parse(localStorage.getItem("history"))
        : []
      history = [...history, { url: url, title: title, timestamp: new Date().toISOString() }]
      localStorage.setItem("history", JSON.stringify(history))

      
      document.dispatchEvent(
        new CustomEvent("url-changed", {
          detail: {
            tabId: currentTab,
            title: title,
            url: url,
          },
        }),
      )


    const yourL = new URL(url); // parse the url
    const pathname = yourL.pathname === "/" 
      ? "/" 
      : yourL.pathname.replace(/\/+$/, ""); // normalize

      switch(pathname) {
        case `/help`:
          url = "vim://help"
          break;
        case `/newtab`:
          url = "vim://newtab"
          break;
      }

      input.value = url
    })

    document.dispatchEvent(
      new CustomEvent("new-tab", {
        detail: {
          tabNumber: tabCounter,
        },
      }),
    )

  }

  function switchTab(tabNumber) {
    let frames = document.querySelectorAll("iframe")
    let framesArr = [...frames]
    framesArr.forEach((frame) => {
      if (frame.id != `frame-${tabNumber}`) frame.classList.add("hidden")
      else frame.classList.remove("hidden")
    })

    currentTab = tabNumber
    currentFrame = document.getElementById(`frame-${tabNumber}`)

    input.value = decodeURIComponent(
      currentFrame.contentWindow.location.href.split("/").pop(),
    )

    document.dispatchEvent(
      new CustomEvent("switch-tab", {
        detail: {
          tabNumber: tabNumber,
        },
      }),
    )
  }

  function closeTab(tabNumber) {
    let frames = document.querySelectorAll("iframe")
    let framesArr = [...frames]
    framesArr.forEach((frame) => {
      if (frame.id === `frame-${tabNumber}`) {
        frame.remove()
      }
    })

    if (currentTab === tabNumber) {
      const otherFrames = document.querySelectorAll('iframe[id^="frame-"]')
      if (otherFrames.length > 0) {
        switchTab(parseInt(otherFrames[0].id.replace("frame-", "")))
      } else {
        newTab()
      }
    }

    document.dispatchEvent(
      new CustomEvent("close-tab", {
        detail: {
          tabNumber: tabNumber,
        },
      }),
    )
  }

  // --- Housekeeping lol ---
  window.newTab = newTab
  window.switchTab = switchTab
  window.closeTab = closeTab

</script>

  </head>
  <body class="bg-base text-text h-screen w-screen ">
    <Tabs/>

    <section id="frames">
    <iframe class="w-full h-full border-0 fixed" title="Proxy Frame" src="/newtab" id="frame-1"></iframe>
    </section>
      <form id="form" class="absolute bottom-0 left-0 right-0 p-4 bg-surface/80">

          <input
            spellcheck="false"
            autocomplete="off"
            id="address"
            type="text"
            placeholder="Search the web freely"
            class=" w-full focus:outline-none"
            />
      </form>
  </body>
</html>
