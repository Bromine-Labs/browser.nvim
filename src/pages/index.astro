---
import Tabs from "../components/Tabs.astro";
import "../styles.css";
---

<html lang="en">
  <head>
    <title>Browser.nvim</title>
  </head>
  <body class="bg-base text-text h-screen w-screen overflow-hidden">
    <Tabs/>

    <section id="frames"></section>
      <form id="form" class="absolute bottom-0 left-0 right-0 p-4 bg-surface/80">

          <input
            spellcheck="false"
            autocomplete="off"
            id="address"
            type="text"
            placeholder="Search the web freely"
            class=" w-full focus:outline-none"
            />
      </form>

<script is:inline defer type="module">
  // --- LETHAL IMPORTS ---
  import {
    setTransport,
    setWisp,
    setProxy,
    makeURL,
    getProxied,
  } from "./lethal.mjs"

  // --- INIT ---
  const form = document.getElementById("form")
  const addressInput = document.getElementById("address")
  let search =
    localStorage.getItem("search-engine") ||
    "https://search.brave.com/search?q=%s"
  let tabCounter = null
  let currentTab = null
  let currentFrame = document.getElementById(`frame-${currentTab}`)

  let backend = localStorage.getItem("proxy-backend") || "uv"
  let wisp = localStorage.getItem("wisp-server") || "wss://anura.pro/"
  let transport = localStorage.getItem("proxy-transport")

  setWisp(wisp)
  setProxy(backend)

  if (transport) setTransport(transport)
  else if (navigator.userAgent.indexOf("Firefox") > 0) setTransport("libcurl")
  else setTransport("epoxy")


  // --- EVENTS ---

form.addEventListener("submit", async (event) => {
  event.preventDefault();

  const address = addressInput.value;
  const searchEngines = {
    ":search brave": "https://search.brave.com/search?q=%s",
    ":search google": "https://www.google.com/search?q=%s",
    ":search ddg": "https://duckduckgo.com/?q=%s",
  };

  const proxies = {
    ":setProxy scram": "scram",
    ":setProxy uv": "uv",
  };

  if (address.startsWith(":setWisp ")) {
    wisp = address.substring(9);
    setWisp(address.substring(9));
    localStorage.setItem("wisp-server", address.substring(9));
    alert(`Wisp server set to: ${wisp}`);
    return;
  }

  if (address.startsWith(":setTransport ")) {
    transport = address.substring(14);
    setWisp(address.substring(14));
    localStorage.setItem("proxy-transport", address.substring(14));
    alert(`Transport set to: ${transport}`);
    return;
  }

  if (address.startsWith(":switchTab ")) {
    const tabNumber = parseInt(address.substring(12));
    if (isNaN(tabNumber) === false) {
      switchTab(tabNumber);
    } else {
      alert("Invalid tab number");
    }
    return;
  }

  if (searchEngines[address]) {
    search = searchEngines[address];
    localStorage.setItem("search-engine", searchEngines[address]);
    alert(`Search engine set to: ${searchEngines[address]}`);
    return;
  }

  if (proxies[address]) {
    setProxy(proxies[address]);
    backend = proxies[address];
    localStorage.setItem("proxy-backend", proxies[address]);
    alert(`Proxy backend set to: ${proxies[address]}`);
    return;
  }

  switch (address) {
    case ":getWisp":
      alert(`Current Wisp server: ${wisp}`);
      break;

    case ":getTransport":
      alert(`Current Transport: ${transport}`);
      break;

    case ":getProxy":
      alert(`Current Proxy Backend: ${backend}`);
      break;

    case ":back":
      currentFrame.contentWindow.history.back();
      break;

    case ":forward":
      currentFrame.contentWindow.history.forward();
      break;

    case ":reload":
      currentFrame.contentWindow.location.reload();
      break;

    case ":newtab":
      newTab();
      break;

    case ":closetab":
      closeTab(currentTab);
      break;

    case ":stealthmode":
      alert("you found a secret command! Stealth mode is now enabled.");
      localStorage.setItem("stealth-mode", "true");
      break;

    case ":help":
      if (localStorage.getItem("stealth-mode")) {
        currentFrame.contentWindow.location.replace("/help");
      } else {
        currentFrame.src = "/help";
      }
      break;

    default:
      const urlToLoad = makeURL(address, search);
      const proxiedUrl = await getProxied(urlToLoad);
      if (localStorage.getItem("stealth-mode")) {
        currentFrame.contentWindow.location.replace(proxiedUrl);
      } else {
        currentFrame.src = proxiedUrl;
      }
      addressInput.value = urlToLoad;
      break;
  }
});

  // --- UTILITIES ---
  async function newTab() {
    tabCounter++

    let frames = document.querySelectorAll("iframe")
    let framesArr = [...frames]
    framesArr.forEach((frame) => {
      frame.classList.add("hidden")
    })

    let frame = document.createElement("iframe")
    frame.setAttribute("class", "w-full h-full border-0 fixed")
    frame.setAttribute("title", "Proxy Frame")
    frame.setAttribute("src", "/newtab")
    frame.setAttribute("id", `frame-${tabCounter}`)
    document.getElementById("frames").appendChild(frame)

    currentTab = tabCounter
    switchTab(tabCounter)


    frame.addEventListener("load", () => {
      let url = decodeURIComponent(
        currentFrame.contentWindow.location.href.split("/").pop(),
      )
      let title = currentFrame.contentWindow.document.title

      let history = localStorage.getItem("history")
        ? JSON.parse(localStorage.getItem("history"))
        : []
      history = [...history, { url: url, title: title }]
      localStorage.setItem("history", JSON.stringify(history))

      
      document.dispatchEvent(
        new CustomEvent("url-changed", {
          detail: {
            tabId: currentTab,
            title: title,
            url: url,
          },
        }),
      )

      switch(url) {
        case "help":
          url = "help.txt"
          break;
      }
      addressInput.value = url
    })

    document.dispatchEvent(
      new CustomEvent("new-tab", {
        detail: {
          tabNumber: tabCounter,
        },
      }),
    )

  }

  function switchTab(tabNumber) {
    let frames = document.querySelectorAll("iframe")
    let framesArr = [...frames]
    framesArr.forEach((frame) => {
      if (frame.id != `frame-${tabNumber}`) frame.classList.add("hidden")
      else frame.classList.remove("hidden")
    })

    currentTab = tabNumber
    currentFrame = document.getElementById(`frame-${tabNumber}`)

    addressInput.value = decodeURIComponent(
      currentFrame.contentWindow.location.href.split("/").pop(),
    )

    document.dispatchEvent(
      new CustomEvent("switch-tab", {
        detail: {
          tabNumber: tabNumber,
        },
      }),
    )
  }

  function closeTab(tabNumber) {
    let frames = document.querySelectorAll("iframe")
    let framesArr = [...frames]
    framesArr.forEach((frame) => {
      if (frame.id === `frame-${tabNumber}`) {
        frame.remove()
      }
    })

    if (currentTab === tabNumber) {
      const otherFrames = document.querySelectorAll('iframe[id^="frame-"]')
      if (otherFrames.length > 0) {
        switchTab(parseInt(otherFrames[0].id.replace("frame-", "")))
      } else {
        newTab()
      }
    }

    document.dispatchEvent(
      new CustomEvent("close-tab", {
        detail: {
          tabNumber: tabNumber,
        },
      }),
    )
  }

  // --- Housekeeping lol ---
  window.newTab = newTab
  window.switchTab = switchTab
  window.closeTab = closeTab

  newTab()
</script>
  </body>
</html>
